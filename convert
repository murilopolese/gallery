#!/Users/murilopolese/.nvm/versions/node/v12.16.3/bin/node

const marked = require('marked')
const fs = require('fs')

let brFiles = fs.readdirSync('./research/content')
brFiles = brFiles.filter(f => f.indexOf('.md') !== -1)
let rtpFiles = fs.readdirSync('./research/content/rtp')

async function getHtml(mdFile) {
  const renderer = {
    image(href, title, text) {
      if (text.indexOf('http') === 0) {
        return `
          <a href="${text}" target="_blank"><img src="${href}" alt="${text}" /></a>
        `
      } else {
        return `
          <img src="${href}" alt="${text}" />
        `
      }
    },
    link (href, title, text) {
      if (
        href.indexOf('youtube.com') !== -1
        || href.indexOf('youtube-nocookie.com') !== -1
      ) {
        return `<span class="embed"><iframe width="960" height="540" src="${href}" frameborder="0" allowfullscreen></iframe></span>`
      }
      if (href.indexOf('http') !== -1) {
        return `
          <a href="${href}" alt="${title}" target="_blank">${text}</a>
        `
      }
      return `
        <a href="${href}" alt="${title}">${text}</a>
      `
    }
  };

  marked.use({ renderer })

  let mdContents = fs.readFileSync(mdFile, 'utf-8')
  return marked(mdContents)
}

function template(html) {
  return `
    <!DOCTYPE html>
    <html lang="pt" dir="ltr">
      <head>
        <meta charset="utf-8">
        <title>Research / Pesquisa</title>
        <style>
          * { box-sizing: border-box; }
          body {
            margin: 0;
            padding: 2em;
            max-width: 760px;
            margin: 0 auto;
            line-height: 1.15em;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            justify-content: center;
            background: #fff;
            color: #222;
            font-family: 'Inconsolata', monospace;
            padding-bottom: 20vh;
          }
          img {
            max-width: 100%;
            max-height: 350px;
          }
          p {
            margin: 0.5em 0;
          }
          row {
            max-width: 100%;
            overflow: hidden;
          }
          row p {
            display: flex;
            justify-content: space-around;
            margin: 0;
            padding: 0.5em 0;
          }
          row p a {
            display: inline-flex;
            padding: 1em;
          }
          row p .embed {
            display: inline-flex;
            margin: 1em;
            height: 250px;
          }
          iframe {
            max-width: 100% !important;
            max-height: 100% !important;
          }
          a:link {
            text-decoration: none;
            color: blue;
          }
          a:visited {
            color: navy;
          }
          .menu {
            list-style: none;
            padding: 0;
            margin: 0;
            width: 100%;
            display: flex;
            flex-diretion: row;
            justify-content: space-between;
          }
        </style>
      </head>
      <body>
        <ul class="menu">
          <li><a href="./index.html"><</a><span class="left"></li>
          <li><a href="http://gallery.bananabanana.me" target="_blank">gallery</a></li>
        </ul>
        ${html}
      </body>
      </html>
    `
}

function outputName(name) {
  let [ n, extension ] = name.split('.')
  let words = n.split('_')
  return words.map(w => w.toLowerCase() ).join('-')
}

brFiles.forEach(async (file) => {
  let html = await getHtml(`./research/content/${file}`)
  fs.writeFileSync(`./research/output/${outputName(file)}.html`, template(html))
})

rtpFiles.forEach(async (file) => {
  let html = await getHtml(`./research/content/rtp/${file}`)
  fs.writeFileSync(`./research/output/${outputName(file)}.html`, template(html))
})
